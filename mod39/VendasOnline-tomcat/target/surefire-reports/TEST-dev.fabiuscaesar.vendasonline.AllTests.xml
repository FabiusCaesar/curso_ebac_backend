<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="dev.fabiuscaesar.vendasonline.AllTests" time="21.101" tests="40" errors="0" skipped="0" failures="0">
  <properties>
    <property name="sun.desktop" value="windows"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="java.specification.version" value="11"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\Fabio\Desktop\Full Stack Java\back-end\tarefas-repository\mod39\VendasOnline-tomcat\target\test-classes;C:\Users\Fabio\Desktop\Full Stack Java\back-end\tarefas-repository\mod39\VendasOnline-tomcat\target\classes;C:\Users\Fabio\.m2\repository\org\glassfish\jakarta.faces\2.3.17\jakarta.faces-2.3.17.jar;C:\Users\Fabio\.m2\repository\org\jboss\weld\servlet\weld-servlet-shaded\3.1.9.Final\weld-servlet-shaded-3.1.9.Final.jar;C:\Users\Fabio\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\Fabio\.m2\repository\org\hibernate\hibernate-core\5.6.15.Final\hibernate-core-5.6.15.Final.jar;C:\Users\Fabio\.m2\repository\org\jboss\logging\jboss-logging\3.4.3.Final\jboss-logging-3.4.3.Final.jar;C:\Users\Fabio\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\Fabio\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Fabio\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\Fabio\.m2\repository\org\jboss\jandex\2.4.2.Final\jandex-2.4.2.Final.jar;C:\Users\Fabio\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Fabio\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\Fabio\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\Fabio\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\Fabio\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\Fabio\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\Fabio\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\Fabio\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\Fabio\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\Fabio\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;C:\Users\Fabio\.m2\repository\org\primefaces\primefaces\11.0.0\primefaces-11.0.0.jar;C:\Users\Fabio\.m2\repository\javax\servlet\javax.servlet-api\4.0.1\javax.servlet-api-4.0.1.jar;C:\Users\Fabio\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\Fabio\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Cuiaba"/>
    <property name="java.vm.specification.version" value="11"/>
    <property name="os.name" value="Windows 10"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-11\bin"/>
    <property name="sun.java.command" value="C:\Users\Fabio\AppData\Local\Temp\surefire9501360915142054480\surefirebooter-20251024153539025_3.jar C:\Users\Fabio\AppData\Local\Temp\surefire9501360915142054480 2025-10-24T15-35-38_172-jvmRun1 surefire-20251024153539025_1tmp surefire_0-20251024153539025_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\Fabio\Desktop\Full Stack Java\back-end\tarefas-repository\mod39\VendasOnline-tomcat\target\test-classes;C:\Users\Fabio\Desktop\Full Stack Java\back-end\tarefas-repository\mod39\VendasOnline-tomcat\target\classes;C:\Users\Fabio\.m2\repository\org\glassfish\jakarta.faces\2.3.17\jakarta.faces-2.3.17.jar;C:\Users\Fabio\.m2\repository\org\jboss\weld\servlet\weld-servlet-shaded\3.1.9.Final\weld-servlet-shaded-3.1.9.Final.jar;C:\Users\Fabio\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\Fabio\.m2\repository\org\hibernate\hibernate-core\5.6.15.Final\hibernate-core-5.6.15.Final.jar;C:\Users\Fabio\.m2\repository\org\jboss\logging\jboss-logging\3.4.3.Final\jboss-logging-3.4.3.Final.jar;C:\Users\Fabio\.m2\repository\net\bytebuddy\byte-buddy\1.12.18\byte-buddy-1.12.18.jar;C:\Users\Fabio\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Fabio\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.1.1.Final\jboss-transaction-api_1.2_spec-1.1.1.Final.jar;C:\Users\Fabio\.m2\repository\org\jboss\jandex\2.4.2.Final\jandex-2.4.2.Final.jar;C:\Users\Fabio\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\Fabio\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\Fabio\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.1.2.Final\hibernate-commons-annotations-5.1.2.Final.jar;C:\Users\Fabio\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\Fabio\.m2\repository\org\glassfish\jaxb\jaxb-runtime\2.3.1\jaxb-runtime-2.3.1.jar;C:\Users\Fabio\.m2\repository\org\glassfish\jaxb\txw2\2.3.1\txw2-2.3.1.jar;C:\Users\Fabio\.m2\repository\com\sun\istack\istack-commons-runtime\3.0.7\istack-commons-runtime-3.0.7.jar;C:\Users\Fabio\.m2\repository\org\jvnet\staxex\stax-ex\1.8\stax-ex-1.8.jar;C:\Users\Fabio\.m2\repository\com\sun\xml\fastinfoset\FastInfoset\1.2.15\FastInfoset-1.2.15.jar;C:\Users\Fabio\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;C:\Users\Fabio\.m2\repository\org\primefaces\primefaces\11.0.0\primefaces-11.0.0.jar;C:\Users\Fabio\.m2\repository\javax\servlet\javax.servlet-api\4.0.1\javax.servlet-api-4.0.1.jar;C:\Users\Fabio\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\Fabio\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Fabio"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-11"/>
    <property name="file.separator" value="\"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="C:\Users\Fabio\Desktop\Full Stack Java\back-end\tarefas-repository\mod39\VendasOnline-tomcat"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="surefire.real.class.path" value="C:\Users\Fabio\AppData\Local\Temp\surefire9501360915142054480\surefirebooter-20251024153539025_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="11.0.27+8-LTS-232"/>
    <property name="user.name" value="Fabio"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="java.vendor.version" value="18.9"/>
    <property name="localRepository" value="C:\Users\Fabio\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\Fabio\AppData\Local\Temp\"/>
    <property name="java.version" value="11.0.27"/>
    <property name="user.dir" value="C:\Users\Fabio\Desktop\Full Stack Java\back-end\tarefas-repository\mod39\VendasOnline-tomcat"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-11\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Users/Fabio/Desktop/Full Stack Java/back-end/sts-4.30.0.RELEASE//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_21.0.6.v20250130-0529/jre/bin/server;C:/Users/Fabio/Desktop/Full Stack Java/back-end/sts-4.30.0.RELEASE//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_21.0.6.v20250130-0529/jre/bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Java\jdk-11\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files\nodejs\;C:\Users\Fabio\AppData\Roaming\npm;C:\Program Files\Git\cmd;C:\Users\Fabio\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Fabio\AppData\Local\Programs\oh-my-posh\bin\;C:\Users\Fabio\AppData\Local\Microsoft\WindowsApps;C:\Users\Fabio\Desktop\Full Stack Java\back-end\sts-4.30.0.RELEASE;;."/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vm.version" value="11.0.27+8-LTS-232"/>
    <property name="java.specification.maintenance.version" value="3"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="55.0"/>
  </properties>
  <testcase name="salvarCliente" classname="dev.fabiuscaesar.vendasonline.dao.ClienteDAOTest" time="1.647">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:43 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:43 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 5.6.15.Final
out 24, 2025 3:35:44 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager <clinit>
INFO: HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
out 24, 2025 3:35:46 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:46 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:46 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:46 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:46 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:47 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:47 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:50 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1934ad7c] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:50 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@3453acd2] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:50 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:51 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:51 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:51 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:51 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:51 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:51 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:51 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:51 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:52 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@4052b19f] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:52 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@380ce5a3] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:52 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:52 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="excluirCliente" classname="dev.fabiuscaesar.vendasonline.dao.ClienteDAOTest" time="0.932">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:52 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:52 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:52 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:52 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:52 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:52 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:52 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:52 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:53 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2ab09943] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:53 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7d50f2a8] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:53 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="pesquisarCliente" classname="dev.fabiuscaesar.vendasonline.dao.ClienteDAOTest" time="0.256">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:53 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:53 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:53 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:53 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@3855d9b2] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:53 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@39f42d0e] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:53 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="alterarCliente" classname="dev.fabiuscaesar.vendasonline.dao.ClienteDAOTest" time="0.447">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    update
        tb_cliente 
    set
        cep=?,
        cidade=?,
        cpf=?,
        endereco=?,
        estado=?,
        nome=?,
        numero=?,
        tel=? 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:53 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:53 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:53 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:53 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:54 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@5a4c98d7] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:54 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@668a32a4] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:54 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="buscarTodos" classname="dev.fabiuscaesar.vendasonline.dao.ClienteDAOTest" time="0.365">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:54 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:54 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:54 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:54 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@b5de9ac] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:54 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@4ecd8ab1] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:54 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="deveFalharSeSaldoInsuficiente" classname="dev.fabiuscaesar.vendasonline.dao.EstoqueDAOTest" time="0.191">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:54 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:54 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:54 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:54 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:54 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@632d4cf2] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:54 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@f10d055] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:55 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
  </testcase>
  <testcase name="incrementarNaoAlteraQuandoQtdNaoPositiva" classname="dev.fabiuscaesar.vendasonline.dao.EstoqueDAOTest" time="0.03">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="deveIncrementar" classname="dev.fabiuscaesar.vendasonline.dao.EstoqueDAOTest" time="0.048">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade+?,
        updated_at=? 
    where
        id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="decrementarFalhaSeNaoExisteEstoque" classname="dev.fabiuscaesar.vendasonline.dao.EstoqueDAOTest" time="0.018">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="decrementarNaoAlteraQuandoQtdNaoPositiva" classname="dev.fabiuscaesar.vendasonline.dao.EstoqueDAOTest" time="0.021">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="deveDecrementarComSaldoSuficiente" classname="dev.fabiuscaesar.vendasonline.dao.EstoqueDAOTest" time="0.036">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="excluir" classname="dev.fabiuscaesar.vendasonline.dao.ProdutoDAOTest" time="0.472">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_ 
    where
        produto0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_ 
    where
        produto0_.codigo=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:55 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:55 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:55 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:55 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@5ad0c70a] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:55 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2a16d4dc] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:55 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="salvar" classname="dev.fabiuscaesar.vendasonline.dao.ProdutoDAOTest" time="0.451">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_ 
    where
        produto0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:55 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:55 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:56 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:56 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:56 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@4f8900b0] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:56 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@e7e455d] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:56 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="alterarProduto" classname="dev.fabiuscaesar.vendasonline.dao.ProdutoDAOTest" time="0.568">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    update
        tb_produto 
    set
        codigo=?,
        descricao=?,
        modelo=?,
        nome=?,
        valor=? 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_ 
    where
        produto0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_ 
    where
        produto0_.codigo=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:56 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:56 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:56 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:56 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1d5048d1] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:56 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@47d9c01] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:56 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:56 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="buscarTodos" classname="dev.fabiuscaesar.vendasonline.dao.ProdutoDAOTest" time="0.317">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:56 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:57 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:57 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:57 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@5d3f8661] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:57 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@1df9f7c6] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:57 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="pesquisar" classname="dev.fabiuscaesar.vendasonline.dao.ProdutoDAOTest" time="0.445">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_ 
    where
        produto0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_,
        produto0_.codigo as codigo2_2_,
        produto0_.descricao as descrica3_2_,
        produto0_.modelo as modelo4_2_,
        produto0_.nome as nome5_2_,
        produto0_.valor as valor6_2_ 
    from
        tb_produto produto0_
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:57 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:57 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:57 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:57 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7d70ba18] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:57 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@6a07e6ca] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:57 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
]]></system-err>
  </testcase>
  <testcase name="removerApenasUmProduto" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.289">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:57 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:57 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:57 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:57 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:58 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@ea84346] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:58 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@4e614370] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:58 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
  </testcase>
  <testcase name="salvarVendaMesmoCodigoExistente" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.146">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:58 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper logExceptions
WARN: SQL Error: 23505, SQLState: 23505
out 24, 2025 3:35:58 PM org.hibernate.engine.jdbc.spi.SqlExceptionHelper logExceptions
ERROR: Unique index or primary key violation: "PUBLIC.uk_venda_codigo_INDEX_F ON PUBLIC.tb_venda(codigo NULLS FIRST) VALUES ( /* 2 */ 'DUP' )"; SQL statement:
insert into tb_venda (id_cliente, codigo, data_venda, status, valor_total, id) values (?, ?, ?, ?, ?, ?) [23505-224]
out 24, 2025 3:35:58 PM org.hibernate.engine.jdbc.batch.internal.AbstractBatchImpl release
INFO: HHH000010: On release of batch it still contained JDBC statements
]]></system-err>
  </testcase>
  <testcase name="finalizarVenda" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="2.431">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="cancelarVenda" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade 
    where
        id=?
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="salvar" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="tentarAdicionarProdutosVendaFinalizada" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.001">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="removerTodosProdutos" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="adicionarMaisProdutosDiferentes" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.053">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="adicionarMaisProdutosDoMesmo" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.024">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    update
        tb_produto_quantidade 
    set
        id_produto=?,
        quantidade=?,
        valor_total=?,
        id_venda=? 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="removerProduto" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="pesquisar" classname="dev.fabiuscaesar.vendasonline.dao.VendaDAOTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="salvarCliente" classname="dev.fabiuscaesar.vendasonline.service.ClienteServiceTest" time="0.0">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:59 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:59 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:59 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:35:59 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@72240290] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:59 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@b5311cb] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:35:59 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
  </testcase>
  <testcase name="excluirCliente" classname="dev.fabiuscaesar.vendasonline.service.ClienteServiceTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        tb_cliente 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="pesquisarCliente" classname="dev.fabiuscaesar.vendasonline.service.ClienteServiceTest" time="0.008">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="alterarCliente" classname="dev.fabiuscaesar.vendasonline.service.ClienteServiceTest" time="0.004">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    update
        tb_cliente 
    set
        cep=?,
        cidade=?,
        cpf=?,
        endereco=?,
        estado=?,
        nome=?,
        numero=?,
        tel=? 
    where
        id=?
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
  <testcase name="deveCriarRegistroDeEstoqueSeAusenteEInicializarEmZero" classname="dev.fabiuscaesar.vendasonline.service.EstoqueServiceTest" time="0.004">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        tb_estoque 
    where
        id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:59 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:35:59 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:35:59 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:35:59 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:36:00 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@2d758472] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:36:00 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@7615666e] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:36:00 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
  </testcase>
  <testcase name="deveIncrementarEDecrementarComSaldoSuficiente" classname="dev.fabiuscaesar.vendasonline.service.EstoqueServiceTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade+?,
        updated_at=? 
    where
        id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="deveFalharAoDecrementarComSaldoInsuficiente" classname="dev.fabiuscaesar.vendasonline.service.EstoqueServiceTest" time="0.003">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade+?,
        updated_at=? 
    where
        id_produto=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="excluir" classname="dev.fabiuscaesar.vendasonline.service.ProdutoServiceTest" time="0.0">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        tb_produto 
    where
        id=?
Hibernate: 
    select
        produto0_.id as id1_2_0_,
        produto0_.codigo as codigo2_2_0_,
        produto0_.descricao as descrica3_2_0_,
        produto0_.modelo as modelo4_2_0_,
        produto0_.nome as nome5_2_0_,
        produto0_.valor as valor6_2_0_ 
    from
        tb_produto produto0_ 
    where
        produto0_.id=?
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:36:00 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:36:00 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:36:00 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:36:00 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:36:00 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:36:00 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:36:00 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:36:00 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:36:00 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:36:01 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@71135794] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:36:01 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@79b0956e] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:36:01 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
  </testcase>
  <testcase name="salvar" classname="dev.fabiuscaesar.vendasonline.service.ProdutoServiceTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="alterarProduto" classname="dev.fabiuscaesar.vendasonline.service.ProdutoServiceTest" time="0.002">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    update
        tb_produto 
    set
        codigo=?,
        descricao=?,
        modelo=?,
        nome=?,
        valor=? 
    where
        id=?
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="pesquisar" classname="dev.fabiuscaesar.vendasonline.service.ProdutoServiceTest" time="0.008">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    delete 
    from
        tb_produto
]]></system-out>
  </testcase>
  <testcase name="deveFinalizarVendaEAbaixarEstoque" classname="dev.fabiuscaesar.vendasonline.service.VendaServiceTest" time="0.185">
    <system-out><![CDATA[Hibernate: 
    
    drop table if exists tb_cliente CASCADE 
Hibernate: 
    
    drop table if exists tb_estoque CASCADE 
Hibernate: 
    
    drop table if exists tb_produto CASCADE 
Hibernate: 
    
    drop table if exists tb_produto_quantidade CASCADE 
Hibernate: 
    
    drop table if exists tb_venda CASCADE 
Hibernate: 
    
    drop sequence if exists sq_cliente
Hibernate: 
    
    drop sequence if exists sq_estoque
Hibernate: 
    
    drop sequence if exists sq_prod_qtd
Hibernate: 
    
    drop sequence if exists sq_produto
Hibernate: 
    
    drop sequence if exists sq_venda
Hibernate: create sequence sq_cliente start with 1 increment by 1
Hibernate: create sequence sq_estoque start with 1 increment by 1
Hibernate: create sequence sq_prod_qtd start with 1 increment by 1
Hibernate: create sequence sq_produto start with 1 increment by 1
Hibernate: create sequence sq_venda start with 1 increment by 1
Hibernate: 
    
    create table tb_cliente (
       id bigint not null,
        cep varchar(9) not null,
        cidade varchar(50) not null,
        cpf bigint not null,
        endereco varchar(50) not null,
        estado varchar(50) not null,
        nome varchar(50) not null,
        numero bigint not null,
        tel bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_estoque (
       id bigint not null,
        quantidade integer not null,
        updated_at timestamp,
        id_produto bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto (
       id bigint not null,
        codigo varchar(10) not null,
        descricao varchar(100) not null,
        modelo varchar(50) not null,
        nome varchar(50) not null,
        valor numeric(10,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_produto_quantidade (
       id bigint not null,
        quantidade integer not null,
        valor_total numeric(19,2) not null,
        id_produto bigint not null,
        id_venda bigint not null,
        primary key (id)
    )
Hibernate: 
    
    create table tb_venda (
       id bigint not null,
        codigo varchar(20) not null,
        data_venda timestamp not null,
        status varchar(20) not null,
        valor_total numeric(19,2) not null,
        id_cliente bigint not null,
        primary key (id)
    )
Hibernate: 
    
    alter table tb_cliente 
       add constraint uk_cliente_cpf unique (cpf)
Hibernate: 
    
    alter table tb_estoque 
       add constraint uk_estoque_produto unique (id_produto)
Hibernate: 
    
    alter table tb_produto 
       add constraint uk_produto_codigo unique (codigo)
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint uk_prod_qtd_venda_prod unique (id_venda, id_produto)
Hibernate: 
    
    alter table tb_venda 
       add constraint uk_venda_codigo unique (codigo)
Hibernate: 
    
    alter table tb_estoque 
       add constraint fk_estoque_produto 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_prod 
       foreign key (id_produto) 
       references tb_produto
Hibernate: 
    
    alter table tb_produto_quantidade 
       add constraint fk_prod_qtd_venda 
       foreign key (id_venda) 
       references tb_venda
Hibernate: 
    
    alter table tb_venda 
       add constraint fk_venda_cliente 
       foreign key (id_cliente) 
       references tb_cliente
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade+?,
        updated_at=? 
    where
        id_produto=?
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    select
        distinct venda0_.id as id1_4_0_,
        cliente1_.id as id1_0_1_,
        produtos2_.id as id1_3_2_,
        produto3_.id as id1_2_3_,
        venda0_.id_cliente as id_clien6_4_0_,
        venda0_.codigo as codigo2_4_0_,
        venda0_.data_venda as data_ven3_4_0_,
        venda0_.status as status4_4_0_,
        venda0_.valor_total as valor_to5_4_0_,
        cliente1_.cep as cep2_0_1_,
        cliente1_.cidade as cidade3_0_1_,
        cliente1_.cpf as cpf4_0_1_,
        cliente1_.endereco as endereco5_0_1_,
        cliente1_.estado as estado6_0_1_,
        cliente1_.nome as nome7_0_1_,
        cliente1_.numero as numero8_0_1_,
        cliente1_.tel as tel9_0_1_,
        produtos2_.id_produto as id_produ4_3_2_,
        produtos2_.quantidade as quantida2_3_2_,
        produtos2_.valor_total as valor_to3_3_2_,
        produtos2_.id_venda as id_venda5_3_2_,
        produtos2_.id_venda as id_venda5_3_0__,
        produtos2_.id as id1_3_0__,
        produto3_.codigo as codigo2_2_3_,
        produto3_.descricao as descrica3_2_3_,
        produto3_.modelo as modelo4_2_3_,
        produto3_.nome as nome5_2_3_,
        produto3_.valor as valor6_2_3_ 
    from
        tb_venda venda0_ 
    inner join
        tb_cliente cliente1_ 
            on venda0_.id_cliente=cliente1_.id 
    left outer join
        tb_produto_quantidade produtos2_ 
            on venda0_.id=produtos2_.id_venda 
    left outer join
        tb_produto produto3_ 
            on produtos2_.id_produto=produto3_.id 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        venda0_.id as id1_4_0_,
        venda0_.id_cliente as id_clien6_4_0_,
        venda0_.codigo as codigo2_4_0_,
        venda0_.data_venda as data_ven3_4_0_,
        venda0_.status as status4_4_0_,
        venda0_.valor_total as valor_to5_4_0_,
        cliente1_.id as id1_0_1_,
        cliente1_.cep as cep2_0_1_,
        cliente1_.cidade as cidade3_0_1_,
        cliente1_.cpf as cpf4_0_1_,
        cliente1_.endereco as endereco5_0_1_,
        cliente1_.estado as estado6_0_1_,
        cliente1_.nome as nome7_0_1_,
        cliente1_.numero as numero8_0_1_,
        cliente1_.tel as tel9_0_1_ 
    from
        tb_venda venda0_ 
    inner join
        tb_cliente cliente1_ 
            on venda0_.id_cliente=cliente1_.id 
    where
        venda0_.id=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
    <system-err><![CDATA[out 24, 2025 3:36:01 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PoolState stop
INFO: HHH10001008: Cleaning up connection pool [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:36:01 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: test]
out 24, 2025 3:36:01 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
out 24, 2025 3:36:01 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.h2.Driver] at URL [jdbc:h2:mem:vendasonline_test;MODE=PostgreSQL;DB_CLOSE_DELAY=0;DATABASE_TO_UPPER=false]
out 24, 2025 3:36:01 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=sa}
out 24, 2025 3:36:01 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
out 24, 2025 3:36:01 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
out 24, 2025 3:36:01 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
out 24, 2025 3:36:01 PM org.hibernate.resource.beans.spi.ManagedBeanRegistryInitiator resolveBeanContainer
INFO: HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
out 24, 2025 3:36:01 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@f1e1d66] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:36:01 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@3cd28235] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
out 24, 2025 3:36:01 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
  </testcase>
  <testcase name="deveCancelarVendaFinalizadaEDevolverEstoque" classname="dev.fabiuscaesar.vendasonline.service.VendaServiceTest" time="0.099">
    <system-out><![CDATA[Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
Hibernate: 
    call next value for sq_cliente
Hibernate: 
    insert 
    into
        tb_cliente
        (cep, cidade, cpf, endereco, estado, nome, numero, tel, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        cliente0_.id as id1_0_,
        cliente0_.cep as cep2_0_,
        cliente0_.cidade as cidade3_0_,
        cliente0_.cpf as cpf4_0_,
        cliente0_.endereco as endereco5_0_,
        cliente0_.estado as estado6_0_,
        cliente0_.nome as nome7_0_,
        cliente0_.numero as numero8_0_,
        cliente0_.tel as tel9_0_ 
    from
        tb_cliente cliente0_ 
    where
        cliente0_.cpf=?
Hibernate: 
    call next value for sq_produto
Hibernate: 
    insert 
    into
        tb_produto
        (codigo, descricao, modelo, nome, valor, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    call next value for sq_estoque
Hibernate: 
    insert 
    into
        tb_estoque
        (id_produto, quantidade, updated_at, id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade+?,
        updated_at=? 
    where
        id_produto=?
Hibernate: 
    call next value for sq_venda
Hibernate: 
    call next value for sq_prod_qtd
Hibernate: 
    insert 
    into
        tb_venda
        (id_cliente, codigo, data_venda, status, valor_total, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        tb_produto_quantidade
        (id_produto, quantidade, valor_total, id_venda, id) 
    values
        (?, ?, ?, ?, ?)
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    select
        distinct venda0_.id as id1_4_0_,
        cliente1_.id as id1_0_1_,
        produtos2_.id as id1_3_2_,
        produto3_.id as id1_2_3_,
        venda0_.id_cliente as id_clien6_4_0_,
        venda0_.codigo as codigo2_4_0_,
        venda0_.data_venda as data_ven3_4_0_,
        venda0_.status as status4_4_0_,
        venda0_.valor_total as valor_to5_4_0_,
        cliente1_.cep as cep2_0_1_,
        cliente1_.cidade as cidade3_0_1_,
        cliente1_.cpf as cpf4_0_1_,
        cliente1_.endereco as endereco5_0_1_,
        cliente1_.estado as estado6_0_1_,
        cliente1_.nome as nome7_0_1_,
        cliente1_.numero as numero8_0_1_,
        cliente1_.tel as tel9_0_1_,
        produtos2_.id_produto as id_produ4_3_2_,
        produtos2_.quantidade as quantida2_3_2_,
        produtos2_.valor_total as valor_to3_3_2_,
        produtos2_.id_venda as id_venda5_3_2_,
        produtos2_.id_venda as id_venda5_3_0__,
        produtos2_.id as id1_3_0__,
        produto3_.codigo as codigo2_2_3_,
        produto3_.descricao as descrica3_2_3_,
        produto3_.modelo as modelo4_2_3_,
        produto3_.nome as nome5_2_3_,
        produto3_.valor as valor6_2_3_ 
    from
        tb_venda venda0_ 
    inner join
        tb_cliente cliente1_ 
            on venda0_.id_cliente=cliente1_.id 
    left outer join
        tb_produto_quantidade produtos2_ 
            on venda0_.id=produtos2_.id_venda 
    left outer join
        tb_produto produto3_ 
            on produtos2_.id_produto=produto3_.id 
    where
        venda0_.codigo=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade-?,
        updated_at=? 
    where
        id_produto=? 
        and quantidade>=?
Hibernate: 
    select
        venda0_.id as id1_4_0_,
        venda0_.id_cliente as id_clien6_4_0_,
        venda0_.codigo as codigo2_4_0_,
        venda0_.data_venda as data_ven3_4_0_,
        venda0_.status as status4_4_0_,
        venda0_.valor_total as valor_to5_4_0_,
        cliente1_.id as id1_0_1_,
        cliente1_.cep as cep2_0_1_,
        cliente1_.cidade as cidade3_0_1_,
        cliente1_.cpf as cpf4_0_1_,
        cliente1_.endereco as endereco5_0_1_,
        cliente1_.estado as estado6_0_1_,
        cliente1_.nome as nome7_0_1_,
        cliente1_.numero as numero8_0_1_,
        cliente1_.tel as tel9_0_1_ 
    from
        tb_venda venda0_ 
    inner join
        tb_cliente cliente1_ 
            on venda0_.id_cliente=cliente1_.id 
    where
        venda0_.id=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    select
        distinct venda0_.id as id1_4_0_,
        cliente1_.id as id1_0_1_,
        produtos2_.id as id1_3_2_,
        produto3_.id as id1_2_3_,
        venda0_.id_cliente as id_clien6_4_0_,
        venda0_.codigo as codigo2_4_0_,
        venda0_.data_venda as data_ven3_4_0_,
        venda0_.status as status4_4_0_,
        venda0_.valor_total as valor_to5_4_0_,
        cliente1_.cep as cep2_0_1_,
        cliente1_.cidade as cidade3_0_1_,
        cliente1_.cpf as cpf4_0_1_,
        cliente1_.endereco as endereco5_0_1_,
        cliente1_.estado as estado6_0_1_,
        cliente1_.nome as nome7_0_1_,
        cliente1_.numero as numero8_0_1_,
        cliente1_.tel as tel9_0_1_,
        produtos2_.id_produto as id_produ4_3_2_,
        produtos2_.quantidade as quantida2_3_2_,
        produtos2_.valor_total as valor_to3_3_2_,
        produtos2_.id_venda as id_venda5_3_2_,
        produtos2_.id_venda as id_venda5_3_0__,
        produtos2_.id as id1_3_0__,
        produto3_.codigo as codigo2_2_3_,
        produto3_.descricao as descrica3_2_3_,
        produto3_.modelo as modelo4_2_3_,
        produto3_.nome as nome5_2_3_,
        produto3_.valor as valor6_2_3_ 
    from
        tb_venda venda0_ 
    inner join
        tb_cliente cliente1_ 
            on venda0_.id_cliente=cliente1_.id 
    left outer join
        tb_produto_quantidade produtos2_ 
            on venda0_.id=produtos2_.id_venda 
    left outer join
        tb_produto produto3_ 
            on produtos2_.id_produto=produto3_.id 
    where
        venda0_.codigo=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    update
        tb_estoque 
    set
        quantidade=quantidade+?,
        updated_at=? 
    where
        id_produto=?
Hibernate: 
    select
        venda0_.id as id1_4_0_,
        venda0_.id_cliente as id_clien6_4_0_,
        venda0_.codigo as codigo2_4_0_,
        venda0_.data_venda as data_ven3_4_0_,
        venda0_.status as status4_4_0_,
        venda0_.valor_total as valor_to5_4_0_,
        cliente1_.id as id1_0_1_,
        cliente1_.cep as cep2_0_1_,
        cliente1_.cidade as cidade3_0_1_,
        cliente1_.cpf as cpf4_0_1_,
        cliente1_.endereco as endereco5_0_1_,
        cliente1_.estado as estado6_0_1_,
        cliente1_.nome as nome7_0_1_,
        cliente1_.numero as numero8_0_1_,
        cliente1_.tel as tel9_0_1_ 
    from
        tb_venda venda0_ 
    inner join
        tb_cliente cliente1_ 
            on venda0_.id_cliente=cliente1_.id 
    where
        venda0_.id=?
Hibernate: 
    update
        tb_venda 
    set
        id_cliente=?,
        codigo=?,
        data_venda=?,
        status=?,
        valor_total=? 
    where
        id=?
Hibernate: 
    select
        estoque0_.id as id1_1_,
        estoque0_.id_produto as id_produ4_1_,
        estoque0_.quantidade as quantida2_1_,
        estoque0_.updated_at as updated_3_1_ 
    from
        tb_estoque estoque0_ 
    where
        estoque0_.id_produto=?
Hibernate: 
    select
        venda0_.id as id1_4_,
        venda0_.id_cliente as id_clien6_4_,
        venda0_.codigo as codigo2_4_,
        venda0_.data_venda as data_ven3_4_,
        venda0_.status as status4_4_,
        venda0_.valor_total as valor_to5_4_ 
    from
        tb_venda venda0_ 
    where
        venda0_.codigo=?
Hibernate: 
    delete 
    from
        tb_produto_quantidade
Hibernate: 
    delete 
    from
        tb_venda
Hibernate: 
    delete 
    from
        tb_estoque
Hibernate: 
    delete 
    from
        tb_produto
Hibernate: 
    delete 
    from
        tb_cliente
]]></system-out>
  </testcase>
</testsuite>